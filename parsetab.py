
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'func_def_listCOMMA ELSE EQUAL EQUALEQUAL EXCLAIMEQUAL ID IF INT LBRACE LESS LESSEQUAL LPAREN MINUS MORE MOREEQUAL NUMBER PLUS RBRACE RETURN RPAREN SEMI SLASH STAR WHILEfunc_def_list : func_def\n                     | func_def_list func_deffunc_def : type_spec ID LPAREN RPAREN compound_stat\n                | type_spec ID LPAREN param_list RPAREN compound_statparam_list : param\n                  | param_list COMMA paramparam : type_spec IDtype_spec : INTcompound_stat : LBRACE RBRACE\n                     | LBRACE stat_list RBRACE\n                     | LBRACE decl_list stat_list RBRACEdecl_list : decl\n                 | decl_list decldecl : type_spec ID SEMIstat_list : stat\n                 | stat_list stat\n    stat : assignment_stat\n            | while_stat\n            | if_stat\n            | return_stat\n            | compound_statassignment_stat : ID EQUAL expr SEMIwhile_stat : WHILE LPAREN expr RPAREN statif_stat : IF LPAREN expr RPAREN stat\n               | IF LPAREN expr RPAREN stat ELSE statreturn_stat : RETURN expr SEMIexpr : equality_exprequality_expr : relational_expr\n                     | equality_expr EQUALEQUAL relational_expr\n                     | equality_expr EXCLAIMEQUAL relational_exprrelational_expr : additive_expr\n                       | relational_expr LESS additive_expr\n                       | relational_expr LESSEQUAL additive_expr\n                       | relational_expr MORE additive_expr\n                       | relational_expr MOREEQUAL additive_expradditive_expr : multicative_expr\n                     | additive_expr PLUS multicative_expr\n                     | additive_expr MINUS multicative_exprmulticative_expr : unary_expr\n                        | multicative_expr STAR unary_expr\n                        | multicative_expr SLASH unary_exprunary_expr : postfix_expr\n                  | MINUS unary_exprpostfix_expr : primary_expr\n                    | ID LPAREN RPAREN\n                    | ID LPAREN argument_expr_list RPARENargument_expr_list : equality_expr\n                          | argument_expr_list COMMA equality_exprprimary_expr : IDprimary_expr : NUMBERprimary_expr : RPAREN expr LPAREN'
    
_lr_action_items = {'INT':([0,1,2,5,7,13,14,16,17,19,21,32,34,37,54,55,],[4,4,-1,-2,4,-3,4,4,-9,4,-12,-4,-10,-13,-11,-14,]),'$end':([1,2,5,13,17,32,34,54,],[0,-1,-2,-3,-9,-4,-10,-11,]),'ID':([3,4,8,14,17,18,19,20,21,22,23,24,25,26,27,31,34,35,36,37,39,40,41,47,52,54,55,59,60,61,62,63,64,65,66,67,68,69,71,73,74,75,86,90,91,93,94,96,],[6,-8,12,28,-9,28,28,-15,-12,-17,-18,-19,-20,-21,38,51,-10,-16,28,-13,51,51,51,51,51,-11,-14,-26,51,51,51,51,51,51,51,51,51,51,51,-22,28,28,51,-23,-24,51,28,-25,]),'LPAREN':([6,29,30,43,44,45,46,48,49,50,51,53,70,72,76,77,78,79,80,81,82,83,84,85,86,89,92,],[7,40,41,-27,-28,-31,-36,-39,-42,-44,71,-50,-43,89,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'RPAREN':([7,10,11,12,31,33,39,40,41,43,44,45,46,47,48,49,50,51,52,53,57,58,60,61,62,63,64,65,66,67,68,69,70,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,],[9,15,-5,-7,52,-6,52,52,52,-27,-28,-31,-36,52,-39,-42,-44,-49,52,-50,74,75,52,52,52,52,52,52,52,52,52,52,-43,86,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,52,92,-47,-51,-46,52,-48,]),'LBRACE':([9,14,15,17,18,19,20,21,22,23,24,25,26,34,35,36,37,54,55,59,73,74,75,90,91,94,96,],[14,14,14,-9,14,14,-15,-12,-17,-18,-19,-20,-21,-10,-16,14,-13,-11,-14,-26,-22,14,14,-23,-24,14,-25,]),'COMMA':([10,11,12,33,44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,95,],[16,-5,-7,-6,-28,-31,-36,-39,-42,-44,-49,-50,-43,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,-45,93,-47,-51,-46,-48,]),'RBRACE':([14,17,18,20,22,23,24,25,26,34,35,36,54,59,73,90,91,96,],[17,-9,34,-15,-17,-18,-19,-20,-21,-10,-16,54,-11,-26,-22,-23,-24,-25,]),'WHILE':([14,17,18,19,20,21,22,23,24,25,26,34,35,36,37,54,55,59,73,74,75,90,91,94,96,],[29,-9,29,29,-15,-12,-17,-18,-19,-20,-21,-10,-16,29,-13,-11,-14,-26,-22,29,29,-23,-24,29,-25,]),'IF':([14,17,18,19,20,21,22,23,24,25,26,34,35,36,37,54,55,59,73,74,75,90,91,94,96,],[30,-9,30,30,-15,-12,-17,-18,-19,-20,-21,-10,-16,30,-13,-11,-14,-26,-22,30,30,-23,-24,30,-25,]),'RETURN':([14,17,18,19,20,21,22,23,24,25,26,34,35,36,37,54,55,59,73,74,75,90,91,94,96,],[31,-9,31,31,-15,-12,-17,-18,-19,-20,-21,-10,-16,31,-13,-11,-14,-26,-22,31,31,-23,-24,31,-25,]),'ELSE':([17,22,23,24,25,26,34,54,59,73,90,91,96,],[-9,-17,-18,-19,-20,-21,-10,-11,-26,-22,-23,94,-25,]),'EQUAL':([28,],[39,]),'MINUS':([31,39,40,41,45,46,47,48,49,50,51,52,53,60,61,62,63,64,65,66,67,68,69,70,71,78,79,80,81,82,83,84,85,86,89,92,93,],[47,47,47,47,67,-36,47,-39,-42,-44,-49,47,-50,47,47,47,47,47,47,47,47,47,47,-43,47,67,67,67,67,-37,-38,-40,-41,47,-51,-46,47,]),'NUMBER':([31,39,40,41,47,52,60,61,62,63,64,65,66,67,68,69,71,86,93,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'SEMI':([38,42,43,44,45,46,48,49,50,51,53,56,70,76,77,78,79,80,81,82,83,84,85,86,89,92,],[55,59,-27,-28,-31,-36,-39,-42,-44,-49,-50,73,-43,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'EQUALEQUAL':([43,44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,88,89,92,95,],[60,-28,-31,-36,-39,-42,-44,-49,-50,-43,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,-45,60,-51,-46,60,]),'EXCLAIMEQUAL':([43,44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,88,89,92,95,],[61,-28,-31,-36,-39,-42,-44,-49,-50,-43,-29,-30,-32,-33,-34,-35,-37,-38,-40,-41,-45,61,-51,-46,61,]),'LESS':([44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,89,92,],[62,-31,-36,-39,-42,-44,-49,-50,-43,62,62,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'LESSEQUAL':([44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,89,92,],[63,-31,-36,-39,-42,-44,-49,-50,-43,63,63,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'MORE':([44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,89,92,],[64,-31,-36,-39,-42,-44,-49,-50,-43,64,64,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'MOREEQUAL':([44,45,46,48,49,50,51,53,70,76,77,78,79,80,81,82,83,84,85,86,89,92,],[65,-31,-36,-39,-42,-44,-49,-50,-43,65,65,-32,-33,-34,-35,-37,-38,-40,-41,-45,-51,-46,]),'PLUS':([45,46,48,49,50,51,53,70,78,79,80,81,82,83,84,85,86,89,92,],[66,-36,-39,-42,-44,-49,-50,-43,66,66,66,66,-37,-38,-40,-41,-45,-51,-46,]),'STAR':([46,48,49,50,51,53,70,82,83,84,85,86,89,92,],[68,-39,-42,-44,-49,-50,-43,68,68,-40,-41,-45,-51,-46,]),'SLASH':([46,48,49,50,51,53,70,82,83,84,85,86,89,92,],[69,-39,-42,-44,-49,-50,-43,69,69,-40,-41,-45,-51,-46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_def_list':([0,],[1,]),'func_def':([0,1,],[2,5,]),'type_spec':([0,1,7,14,16,19,],[3,3,8,27,8,27,]),'param_list':([7,],[10,]),'param':([7,16,],[11,33,]),'compound_stat':([9,14,15,18,19,36,74,75,94,],[13,26,32,26,26,26,26,26,26,]),'stat_list':([14,19,],[18,36,]),'decl_list':([14,],[19,]),'stat':([14,18,19,36,74,75,94,],[20,35,20,35,90,91,96,]),'decl':([14,19,],[21,37,]),'assignment_stat':([14,18,19,36,74,75,94,],[22,22,22,22,22,22,22,]),'while_stat':([14,18,19,36,74,75,94,],[23,23,23,23,23,23,23,]),'if_stat':([14,18,19,36,74,75,94,],[24,24,24,24,24,24,24,]),'return_stat':([14,18,19,36,74,75,94,],[25,25,25,25,25,25,25,]),'expr':([31,39,40,41,52,86,],[42,56,57,58,72,72,]),'equality_expr':([31,39,40,41,52,71,86,93,],[43,43,43,43,43,88,43,95,]),'relational_expr':([31,39,40,41,52,60,61,71,86,93,],[44,44,44,44,44,76,77,44,44,44,]),'additive_expr':([31,39,40,41,52,60,61,62,63,64,65,71,86,93,],[45,45,45,45,45,45,45,78,79,80,81,45,45,45,]),'multicative_expr':([31,39,40,41,52,60,61,62,63,64,65,66,67,71,86,93,],[46,46,46,46,46,46,46,46,46,46,46,82,83,46,46,46,]),'unary_expr':([31,39,40,41,47,52,60,61,62,63,64,65,66,67,68,69,71,86,93,],[48,48,48,48,70,48,48,48,48,48,48,48,48,48,84,85,48,48,48,]),'postfix_expr':([31,39,40,41,47,52,60,61,62,63,64,65,66,67,68,69,71,86,93,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'primary_expr':([31,39,40,41,47,52,60,61,62,63,64,65,66,67,68,69,71,86,93,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'argument_expr_list':([71,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> func_def_list","S'",1,None,None,None),
  ('func_def_list -> func_def','func_def_list',1,'p_func_def_list','parser.py',99),
  ('func_def_list -> func_def_list func_def','func_def_list',2,'p_func_def_list','parser.py',100),
  ('func_def -> type_spec ID LPAREN RPAREN compound_stat','func_def',5,'p_func_def','parser.py',124),
  ('func_def -> type_spec ID LPAREN param_list RPAREN compound_stat','func_def',6,'p_func_def','parser.py',125),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',135),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',136),
  ('param -> type_spec ID','param',2,'p_param','parser.py',143),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',148),
  ('compound_stat -> LBRACE RBRACE','compound_stat',2,'p_compound_stat','parser.py',153),
  ('compound_stat -> LBRACE stat_list RBRACE','compound_stat',3,'p_compound_stat','parser.py',154),
  ('compound_stat -> LBRACE decl_list stat_list RBRACE','compound_stat',4,'p_compound_stat','parser.py',155),
  ('decl_list -> decl','decl_list',1,'p_decl_list','parser.py',165),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','parser.py',166),
  ('decl -> type_spec ID SEMI','decl',3,'p_decl','parser.py',174),
  ('stat_list -> stat','stat_list',1,'p_stat_list','parser.py',179),
  ('stat_list -> stat_list stat','stat_list',2,'p_stat_list','parser.py',180),
  ('stat -> assignment_stat','stat',1,'p_stat','parser.py',188),
  ('stat -> while_stat','stat',1,'p_stat','parser.py',189),
  ('stat -> if_stat','stat',1,'p_stat','parser.py',190),
  ('stat -> return_stat','stat',1,'p_stat','parser.py',191),
  ('stat -> compound_stat','stat',1,'p_stat','parser.py',192),
  ('assignment_stat -> ID EQUAL expr SEMI','assignment_stat',4,'p_assignment_stat','parser.py',196),
  ('while_stat -> WHILE LPAREN expr RPAREN stat','while_stat',5,'p_while_stat','parser.py',208),
  ('if_stat -> IF LPAREN expr RPAREN stat','if_stat',5,'p_if_stat','parser.py',226),
  ('if_stat -> IF LPAREN expr RPAREN stat ELSE stat','if_stat',7,'p_if_stat','parser.py',227),
  ('return_stat -> RETURN expr SEMI','return_stat',3,'p_return_stat','parser.py',262),
  ('expr -> equality_expr','expr',1,'p_expr','parser.py',271),
  ('equality_expr -> relational_expr','equality_expr',1,'p_equality_epxr','parser.py',277),
  ('equality_expr -> equality_expr EQUALEQUAL relational_expr','equality_expr',3,'p_equality_epxr','parser.py',278),
  ('equality_expr -> equality_expr EXCLAIMEQUAL relational_expr','equality_expr',3,'p_equality_epxr','parser.py',279),
  ('relational_expr -> additive_expr','relational_expr',1,'p_relational_expr','parser.py',287),
  ('relational_expr -> relational_expr LESS additive_expr','relational_expr',3,'p_relational_expr','parser.py',288),
  ('relational_expr -> relational_expr LESSEQUAL additive_expr','relational_expr',3,'p_relational_expr','parser.py',289),
  ('relational_expr -> relational_expr MORE additive_expr','relational_expr',3,'p_relational_expr','parser.py',290),
  ('relational_expr -> relational_expr MOREEQUAL additive_expr','relational_expr',3,'p_relational_expr','parser.py',291),
  ('additive_expr -> multicative_expr','additive_expr',1,'p_additive_expr','parser.py',299),
  ('additive_expr -> additive_expr PLUS multicative_expr','additive_expr',3,'p_additive_expr','parser.py',300),
  ('additive_expr -> additive_expr MINUS multicative_expr','additive_expr',3,'p_additive_expr','parser.py',301),
  ('multicative_expr -> unary_expr','multicative_expr',1,'p_multicative_expr','parser.py',309),
  ('multicative_expr -> multicative_expr STAR unary_expr','multicative_expr',3,'p_multicative_expr','parser.py',310),
  ('multicative_expr -> multicative_expr SLASH unary_expr','multicative_expr',3,'p_multicative_expr','parser.py',311),
  ('unary_expr -> postfix_expr','unary_expr',1,'p_unary_expr','parser.py',319),
  ('unary_expr -> MINUS unary_expr','unary_expr',2,'p_unary_expr','parser.py',320),
  ('postfix_expr -> primary_expr','postfix_expr',1,'p_postfix_expr','parser.py',328),
  ('postfix_expr -> ID LPAREN RPAREN','postfix_expr',3,'p_postfix_expr','parser.py',329),
  ('postfix_expr -> ID LPAREN argument_expr_list RPAREN','postfix_expr',4,'p_postfix_expr','parser.py',330),
  ('argument_expr_list -> equality_expr','argument_expr_list',1,'p_argument_expr_list','parser.py',340),
  ('argument_expr_list -> argument_expr_list COMMA equality_expr','argument_expr_list',3,'p_argument_expr_list','parser.py',341),
  ('primary_expr -> ID','primary_expr',1,'p_primary_expr_id','parser.py',348),
  ('primary_expr -> NUMBER','primary_expr',1,'p_primary_expr_number','parser.py',352),
  ('primary_expr -> RPAREN expr LPAREN','primary_expr',3,'p_primary_expr_paren','parser.py',356),
]
